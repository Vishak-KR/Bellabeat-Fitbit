# Install Mcomp package if not installed
if (!require("Mcomp")) {
install.packages("Mcomp")
library(Mcomp)
}
# Replace LAST_DIGIT with your Student ID's last digit
LAST_DIGIT <- 4
# Generate IDs between 1501 and 2500 where the last digit matches LAST_DIGIT
selected_ids <- seq(1501, 2500, by = 10) + LAST_DIGIT - 1
# Filter valid IDs
selected_ids <- selected_ids[selected_ids <= 2500]
# Print the selected IDs
print(selected_ids)
# Load the M3 competition data
data("M3")
# Initialize a list to store time series
time_series_list <- list()
# Loop through selected IDs and extract in-sample and out-of-sample data
for (id in selected_ids) {
ts_data <- M3[[id]]
time_series_list[[as.character(id)]] <- list(
in_sample = ts_data$x,
out_sample = ts_data$xx,
category  = ts_data$type
)
}
# Example: Access time series for ID 1509
print(time_series_list[["1509"]])
# Example: Access time series for ID 1509
print(time_series_list[["1504"]])
daily_activity <- read_csv("dailyActivity_merged.csv")
setwd("~/Documents/Portfolio/Bellabeat/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16")
daily_activity <- read_csv("dailyActivity_merged.csv")
# List of packages
packages <- c(
"tidyverse", "ggplot2", "here", "hms", "janitor", "lubridate", "skimr",
"gridExtra", "paletteer", "crayon", "stringr", "patchwork", "ggthemes",
"ggforce", "personograph", "ggbeeswarm", "knitr"
)
# Install missing packages
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
lapply(packages, install_if_missing)
# Load libraries
lapply(packages, library, character.only = TRUE)
daily_activity <- read_csv("dailyActivity_merged.csv")
daily_calories <- read_csv("dailyCalories_merged.csv")
daily_intensities <- read_csv("dailyIntensities_merged.csv")
daily_steps <- read_csv("dailySteps_merged.csv")
daily_sleep <- read_csv("sleepDay_merged.csv")
weight_log <- read_csv("weightLogInfo_merged.csv")
hourly_calories <- read_csv("hourlyCalories_merged.csv")
hourly_intensities <- read_csv("hourlyIntensities_merged.csv")
hourly_steps <- read_csv("hourlySteps_merged.csv")
minute_sleep <- read_csv("fitbit_data/minuteSleep_merged.csv")
minute_sleep <- read_csv("minuteSleep_merged.csv")
# daily_activity ---------------------------
daily_activity <-
daily_activity %>%
rename(
activity_date = ActivityDate,
total_steps = TotalSteps,
total_distance = TotalDistance,
tracker_distance = TrackerDistance,
logged_activities_d = LoggedActivitiesDistance,
very_active_d = VeryActiveDistance,
moderately_active_d = ModeratelyActiveDistance,
light_active_d = LightActiveDistance,
sedentary_d = SedentaryActiveDistance,
very_active_m = VeryActiveMinutes,
fairly_active_m = FairlyActiveMinutes,
lightly_active_m = LightlyActiveMinutes,
sedentary_m = SedentaryMinutes,
calories = Calories
) %>%
rename_with(
tolower, starts_with("Id")
) %>%
mutate(
# reformat variable as POSIXct to represent date and time
activity_date = parse_date_time(activity_date, "%m/%d/%y"),
# create new variable and format as date only
activity_date_ymd = as.Date(activity_date, "%Y/%m/%d"),
# create new variables for day of week and time of week
day_of_week = weekdays(as.Date(activity_date)),
time_of_week = case_when(
day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ~ "Weekday",
day_of_week %in% c("Saturday", "Sunday") ~ "Weekend")
)
# daily_calories ---------------------------
daily_calories <-
daily_calories %>%
rename(
activity_date = ActivityDay,
calories = Calories
) %>%
rename_with(
tolower, starts_with("Id")
) %>%
mutate(
activity_date = parse_date_time(activity_date, "%m/%d/%Y"),
activity_date_ymd = as.Date(activity_date, "%Y/%m/%d"),
day_of_week = weekdays(as.Date(activity_date)),
time_of_week = case_when(
day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ~ "Weekday",
day_of_week %in% c("Saturday", "Sunday") ~ "Weekend")
)
# daily_intensities ---------------------------
daily_intensities <-
daily_intensities %>%
rename(
activity_date = ActivityDay,
very_active_d = VeryActiveDistance,
moderately_active_d = ModeratelyActiveDistance,
light_active_d = LightActiveDistance,
sedentary_d = SedentaryActiveDistance,
very_active_m = VeryActiveMinutes,
fairly_active_m = FairlyActiveMinutes,
lightly_active_m = LightlyActiveMinutes,
sedentary_m = SedentaryMinutes,
) %>%
rename_with(
tolower, starts_with("Id")
) %>%
mutate(
activity_date = parse_date_time(activity_date, "%m/%d/%Y"),
activity_date_ymd = as.Date(activity_date, "%Y/%m/%d"),
day_of_week = weekdays(as.Date(activity_date)),
time_of_week = case_when(
day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ~ "Weekday",
day_of_week %in% c("Saturday", "Sunday") ~ "Weekend")
)
# daily_sleep ---------------------------
daily_sleep <-
daily_sleep %>%
rename(
activity_date = SleepDay,
total_sleep_records = TotalSleepRecords,
total_minutes_asleep = TotalMinutesAsleep,
total_time_in_bed = TotalTimeInBed
) %>%
rename_with(
tolower, starts_with("Id")
) %>%
mutate(
activity_date = parse_date_time(activity_date, "%m/%d/%Y %I:%M:%S %p"),
activity_date_ymd = as.Date(activity_date, "%Y/%m/%d"),
day_of_week = weekdays(as.Date(activity_date)),
time_of_week = case_when(
day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ~ "Weekday",
day_of_week %in% c("Saturday", "Sunday") ~ "Weekend")
)
# daily_steps ---------------------------
daily_steps <-
daily_steps %>%
rename(
activity_date = ActivityDay,
step_total = StepTotal
) %>%
rename_with(
tolower, starts_with("Id")
) %>%
mutate(
activity_date = parse_date_time(activity_date, "%m/%d/%Y"),
activity_date_ymd = as.Date(activity_date, "%Y/%m/%d"),
day_of_week = weekdays(as.Date(activity_date)),
time_of_week = case_when(
day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ~ "Weekday",
day_of_week %in% c("Saturday", "Sunday") ~ "Weekend")
)
# weight_log ---------------------------
weight_log <-
weight_log %>%
rename(
activity_date = Date,
weight_kg = WeightKg,
weight_lb = WeightPounds,
fat = Fat,
bmi = BMI,
manual_report = IsManualReport,
log_id = LogId
) %>%
rename_with(
tolower, starts_with("Id")
) %>%
mutate(
activity_date = parse_date_time(activity_date, "%m/%d/%Y %I:%M:%S %p"),
activity_date_ymd = as.Date(activity_date, "%Y/%m/%d"),
activity_time = format(activity_date, format = "%I:%M:%S %p"),
day_of_week = weekdays(as.Date(activity_date)),
time_of_week = case_when(
day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ~ "Weekday",
day_of_week %in% c("Saturday", "Sunday") ~ "Weekend"),
hour_of_day = as.POSIXct(activity_date, format = "%I:%M:%S %p")
)
# List of packages
packages <- c(
"tidyverse", "ggplot2", "here", "hms", "janitor", "lubridate", "skimr",
"gridExtra", "paletteer", "crayon", "stringr", "patchwork", "ggthemes",
"ggforce", "personograph", "ggbeeswarm", "knitr"
)
# Install missing packages
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
lapply(packages, install_if_missing)
# Load libraries
lapply(packages, library, character.only = TRUE)
